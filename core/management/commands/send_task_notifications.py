from django.core.management.base import BaseCommand
from django.utils.timezone import now, make_aware, localtime
from django.core.mail import send_mail
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from core.models import Task, CustomUser
from datetime import datetime as dt, timedelta

class Command(BaseCommand):
    help = "Send notifications about upcoming or overdue tasks"

    def handle(self, *args, **kwargs):
        now_local = localtime(now())
        today = now_local.date()
        tomorrow = today + timedelta(days=1)

        start = make_aware(dt.combine(tomorrow, dt.min.time()))
        end = make_aware(dt.combine(tomorrow, dt.max.time()))

        users = CustomUser.objects.filter(receive_notifications=True)

        for user in users:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_tasks = Task.objects.filter(
                user=user,
                status__in=['planned', 'in_progress']
            ).order_by('due_date')

            # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ç—É—Å planned –∏–ª–∏ in_progress, –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º)
            overdue = all_tasks.filter(due_date__lt=now_local)

            # –ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã
            not_overdue_tasks = all_tasks.filter(due_date__gte=now_local)

            # –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)
            in_progress = not_overdue_tasks.filter(status='in_progress')

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)
            planned = not_overdue_tasks.filter(status='planned')

            # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∏–∑ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö)
            upcoming = not_overdue_tasks.filter(due_date__range=(start, end))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            if all_tasks.exists():
                html_message = render_to_string('core/emails/task_notification.html', {
                    'user': user,
                    'upcoming': upcoming,
                    'overdue': overdue,
                    'in_progress': in_progress,
                    'planned': planned,
                    'site_url': 'http://127.0.0.1:8000'  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–¥-–∞–¥—Ä–µ—Å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
                })

                plain_message = strip_tags(html_message)

                send_mail(
                    subject="üìå –û–±–∑–æ—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á ‚Äî Flowvance",
                    message=plain_message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[user.email],
                    html_message=html_message,
                    fail_silently=True,
                )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–∏—Å–µ–º –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)
        self.stdout.write(self.style.SUCCESS("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."))
