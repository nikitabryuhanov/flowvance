from django.core.management.base import BaseCommand
from django.utils.timezone import now, make_aware, localtime
from django.core.mail import send_mail
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from core.models import Task, CustomUser
from datetime import datetime as dt, timedelta

class Command(BaseCommand):
    help = "Send notifications about upcoming or overdue tasks"

    def handle(self, *args, **kwargs):
        now_local = localtime(now())
        today = now_local.date()
        tomorrow = today + timedelta(days=1)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        users = CustomUser.objects.filter(receive_notifications=True)

        for user in users:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tasks = Task.objects.filter(user=user)

            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            overdue = user_tasks.filter(
                due_date__lt=today,
                status__in=['planned', 'in_progress']
            )

            # –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            upcoming = user_tasks.filter(
                due_date=tomorrow,
                status__in=['planned', 'in_progress']
            )

            # –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            in_progress = user_tasks.filter(
                status='in_progress'
            ).exclude(id__in=upcoming.values_list('id', flat=True))

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            planned = user_tasks.filter(
                status='planned',
                due_date__gt=tomorrow
            ).exclude(id__in=upcoming.values_list('id', flat=True))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if any([overdue.exists(), upcoming.exists(), in_progress.exists(), planned.exists()]):
                html_message = render_to_string('core/emails/task_notification.html', {
                    'user': user,
                    'upcoming': upcoming,
                    'overdue': overdue,
                    'in_progress': in_progress,
                    'planned': planned,
                    'site_url': 'http://127.0.0.1:8000'  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–¥-–∞–¥—Ä–µ—Å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
                })

                plain_message = strip_tags(html_message)

                try:
                    send_mail(
                        subject="üìå –û–±–∑–æ—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á ‚Äî Flowvance",
                        message=plain_message,
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        recipient_list=[user.email],
                        html_message=html_message,
                        fail_silently=True,
                    )
                    self.stdout.write(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}: {str(e)}"))

        self.stdout.write(self.style.SUCCESS("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."))
